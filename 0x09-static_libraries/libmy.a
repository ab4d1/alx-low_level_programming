!<arch>
0-isupper.c/    0           0     0     644     152       `
#include "main.h"

/**
 * _isupper - is upper
 *@c: char
 * Return: is upper
 */

int _isupper(int c)
{
	return ('A' <= c && 'Z' >= c);
}

0-memset.c/     0           0     0     644     251       `
#include "main.h"

/**
 * _memset - _memset
 *@s: pointer to int
 *@b: pointer to int
 *@n: int
 * Return: print
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}

0-putchar.c/    0           0     0     644     250       `
#include "main.h"

/**
 * main - entry
 * print alphabet
 * Return:0
 */

int main(void)
{

	char *a = "_putchar";
	unsigned long int i = 0;

	for (i = 0; i < 8; i++)
	{
		_putchar(a[i]);
	}

	_putchar('\n');


	return (0);
}
0-strcat.c/     0           0     0     644     389       `
#include "main.h"

/**
 * _strcat - _strcat
 *@dest: pointer to char
 *@src: pointer to char
 * Return: print
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int len = 0;

	for (i = 0; *(dest + i) != '\0'; i++)
	{
		len++;
	}
	for (i = 0; *(src + i) != '\0'; i++)
	{
		*(dest + len + i) = *(src + i);
	}
	*(dest + len + i) = *(src + i);
	return (dest);
}

1-isdigit.c/    0           0     0     644     150       `
#include "main.h"

/**
 * _isdigit - is upper
 *@c: char
 * Return: is upper
 */

int _isdigit(int c)
{
	return ('0' <= c && '9' >= c);
}
1-memcpy.c/     0           0     0     644     277       `
#include "main.h"

/**
 * _memcpy - _memcpy
 *@dest: pointer to int
 *@src: pointer to int
 *@n: int
 * Return: print
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     411       `
#include "main.h"

/**
 * _strncat - _strncat
 *@dest: pointer to int
 *@src: pointer to int
 *@n: int
 * Return: print
 */

char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int len = 0;

	for (i = 0; *(dest + i) != '\0'; i++)
	{
		len++;
	}
	for (i = 0; *(src + i) != '\0' && i < n; i++)
	{
		*(dest + len + i) = *(src + i);
	}
	*(dest + len + i) = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     449       `
#include "main.h"

/**
 * _atoi - _atoi
 *@s: pointer to int
 * Return: print
 */

int _atoi(char *s)
{
	int i = 0;
	int num = 0;
	int sign = -1;
	int flag = 0;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		if (*(s + i) == '-')
			sign *= -1;
		else if (*(s + i) >= '0' && *(s + i) <= '9')
		{
			num = num * 10;
			num = num - (*(s + i) - '0');
			flag = 1;
		} else if (flag == 1)
			break;
	}


	return (sign * num);
}

2-strchr.c/     0           0     0     644     282       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - _strchr
 *@s: pointer to int
 *@c: pointer to int
 * Return: print
 */

char *_strchr(char *s, char c)
{
	unsigned int i = 0;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		if (*(s + i) == c)
			return (s + i);
	}
	return (NULL);
}
2-strlen.c/     0           0     0     644     226       `
#include "main.h"

/**
 * _strlen - _strlen
 *@s: pointer to int
 * Return: print
 */

int _strlen(char *s)
{
	int i = 0;
	int len = 0;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		len++;
	}

	return (len);
}
2-strncpy.c/    0           0     0     644     429       `
#include "main.h"

/**
 * _strncpy - _strncpy
 *@dest: pointer to int
 *@src: pointer to int
 *@n: int
 * Return: print
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;
	int flag = 0;

	for (i = 0; i < n; i++)
	{
		if (*(src + i) == '\0')
			flag = 1;
		else if (flag == 0)
			*(dest + i) = *(src + i);
		else if (flag == 1)
			*(dest + i) = 0;
	}
	*(dest + i) = '\0';
	return (dest);
}

3-islower.c/    0           0     0     644     159       `
#include "main.h"

/**
 * _islower - is lower case?
 * @c: char
 * Return:1 if true
 */

int _islower(int c)
{

	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     229       `
#include "main.h"

/**
 * _puts - _puts
 *@str: pointer to str
 * Return: print
 */

void _puts(char *str)
{
	int i = 0;


	for (i = 0; *(str + i) != '\0'; i++)
	{
		_putchar(*(str + i));
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     385       `
#include "main.h"

/**
 * _strcmp - _strcmp
 *@s1: pointer to int
 *@s2: pointer to int
 * Return: print
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;
	int sum = 0;
	int flag = 0;

	for (i = 0; *(s1 + i) != '\0' && *(s2 + i) != '\0' ; i++)
	{
		if (*(s1 + i) == '\0')
			flag = 1;
		else if (flag == 0)
			sum += *(s1 + i) - *(s2 + i);
	}
	return (sum);
}

3-strspn.c/     0           0     0     644     398       `
#include "main.h"
#include <stdio.h>

/**
 * _strspn - _strchr
 *@s: pointer to int
 *@accept: pointer to int
 * Return: print
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i = 0;
	unsigned int j = 0;
	unsigned int sum = 0;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				sum++;
		}
	}
	return (sum);
}
4-isalpha.c/    0           0     0     644     159       `
#include "main.h"

/**
 * _isalpha - is alpha case?
 * @c: char
 * Return:1 if true
 */

int _isalpha(int c)
{

	return (c >= 'A' && c <= 'z');
}

4-strpbrk.c/    0           0     0     644     380       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - _strchr
 *@s: pointer to int
 *@accept: pointer to int
 * Return: print
 */

char *_strpbrk(char *s, char *accept)
{
	unsigned int i = 0;
	unsigned int j = 0;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
		}
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     547       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr - _strchr
 *@haystack: pointer to int
 *@needle: pointer to int
 * Return: print
 */

char *_strstr(char *haystack, char *needle)
{
	unsigned int i = 0;
	unsigned int j = 0;
	unsigned int len = 0;

	for (i = 0; *(needle + i) != '\0'; i++)
		len++;
	for (i = 0; *(haystack + i) != '\0'; i++)
	{
		if (*(haystack + i) == *(needle + j))
		{
			j++;
		}
		else if (*(haystack + i) != *(needle + j))
		{
			j = 0;
		}
		if (j == len)
		{
			return (haystack + i - len + 1);
		}
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     153       `
#include "main.h"

/**
 * _abs - absol?
 * @n: int
 * Return:absol
 */

int _abs(int n)
{

	if (n < 0)
	{
		n = -n;
	}

	return (n);
}

9-strcpy.c/     0           0     0     644     302       `
#include "main.h"

/**
 * _strcpy - _strcpy
 *@dest: pointer to int
 *@src: pointer to int
 * Return: print
 */

char *_strcpy(char *dest, char *src)
{
	int i = 0;

	for (i = 0; *(src + i) != '\0'; i++)
	{
		*(dest + i) = *(src + i);
	}
	*(dest + i) = *(src + i);
	return (dest);
}
